{
  "version": 3,
  "sources": ["../../../@strapi/content-manager/admin/src/components/ConfigurationForm/EditFieldForm.tsx", "../../../@strapi/content-manager/admin/src/components/ConfigurationForm/Fields.tsx", "../../../@strapi/content-manager/admin/src/components/ConfigurationForm/Form.tsx"],
  "sourcesContent": ["import {\n  useNotification,\n  InputRenderer,\n  Form,\n  InputProps,\n  useField,\n} from '@strapi/admin/strapi-admin';\nimport { Button, Flex, Grid, Modal } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport * as yup from 'yup';\n\nimport { ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD } from '../../constants/attributes';\nimport { useGetInitialDataQuery } from '../../services/init';\nimport { capitalise } from '../../utils/strings';\nimport { getTranslation } from '../../utils/translations';\nimport { FieldTypeIcon } from '../FieldTypeIcon';\n\nimport { TEMP_FIELD_NAME } from './Fields';\n\nimport type { ConfigurationFormData } from './Form';\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * Constants\n * -----------------------------------------------------------------------------------------------*/\n\nconst FIELD_SCHEMA = yup.object().shape({\n  label: yup.string().required().nullable(),\n  description: yup.string(),\n  editable: yup.boolean(),\n  size: yup.number().required(),\n});\n\n/* -------------------------------------------------------------------------------------------------\n * EditFieldForm\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EditFieldFormProps {\n  attribute?: Schema.Attribute.AnyAttribute;\n  name: string;\n  onClose: () => void;\n}\n\nconst EditFieldForm = ({ attribute, name, onClose }: EditFieldFormProps) => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n\n  const { value, onChange } =\n    useField<ConfigurationFormData['layout'][number]['children'][number]>(name);\n\n  const { data: mainFieldOptions } = useGetInitialDataQuery(undefined, {\n    selectFromResult: (res) => {\n      if (attribute?.type !== 'relation' || !res.data) {\n        return { data: [] };\n      }\n\n      if ('targetModel' in attribute && typeof attribute.targetModel === 'string') {\n        const targetSchema = res.data.contentTypes.find(\n          (schema) => schema.uid === attribute.targetModel\n        );\n\n        if (targetSchema) {\n          return {\n            data: Object.entries(targetSchema.attributes).reduce<\n              Array<{ label: string; value: string }>\n            >((acc, [key, attribute]) => {\n              /**\n               * Create the list of attributes from the schema as to which can\n               * be our `mainField` and dictate the display name of the schema\n               * we're editing.\n               */\n              if (!ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD.includes(attribute.type)) {\n                acc.push({\n                  label: key,\n                  value: key,\n                });\n              }\n\n              return acc;\n            }, []),\n          };\n        }\n      }\n\n      return { data: [] };\n    },\n    skip: attribute?.type !== 'relation',\n  });\n\n  if (!value || value.name === TEMP_FIELD_NAME || !attribute) {\n    // This is very unlikely to happen, but it ensures the form is not opened without a value.\n    console.error(\n      \"You've opened a field to edit without it being part of the form, this is likely a bug with Strapi. Please open an issue.\"\n    );\n\n    toggleNotification({\n      message: formatMessage({\n        id: 'content-manager.containers.edit-settings.modal-form.error',\n        defaultMessage: 'An error occurred while trying to open the form.',\n      }),\n      type: 'danger',\n    });\n\n    return null;\n  }\n\n  return (\n    <Modal.Content>\n      <Form\n        method=\"PUT\"\n        initialValues={value}\n        validationSchema={FIELD_SCHEMA}\n        onSubmit={(data) => {\n          onChange(name, data);\n          onClose();\n        }}\n      >\n        <Modal.Header>\n          <Flex gap={3}>\n            <FieldTypeIcon type={attribute.type} />\n            <Modal.Title>\n              {formatMessage(\n                {\n                  id: 'content-manager.containers.edit-settings.modal-form.label',\n                  defaultMessage: 'Edit {fieldName}',\n                },\n                { fieldName: capitalise(value.name) }\n              )}\n            </Modal.Title>\n          </Flex>\n        </Modal.Header>\n        <Modal.Body>\n          <Grid.Root gap={4}>\n            {[\n              {\n                name: 'label',\n                label: formatMessage({\n                  id: getTranslation('containers.edit-settings.modal-form.label'),\n                  defaultMessage: 'Label',\n                }),\n                size: 6,\n                type: 'string' as const,\n              },\n              {\n                name: 'description',\n                label: formatMessage({\n                  id: getTranslation('containers.edit-settings.modal-form.description'),\n                  defaultMessage: 'Description',\n                }),\n                size: 6,\n                type: 'string' as const,\n              },\n              {\n                name: 'placeholder',\n                label: formatMessage({\n                  id: getTranslation('containers.edit-settings.modal-form.placeholder'),\n                  defaultMessage: 'Placeholder',\n                }),\n                size: 6,\n                type: 'string' as const,\n              },\n              {\n                name: 'editable',\n                label: formatMessage({\n                  id: getTranslation('containers.edit-settings.modal-form.editable'),\n                  defaultMessage: 'Editable',\n                }),\n                size: 6,\n                type: 'boolean' as const,\n              },\n              {\n                name: 'mainField',\n                label: formatMessage({\n                  id: getTranslation('containers.edit-settings.modal-form.mainField'),\n                  defaultMessage: 'Entry title',\n                }),\n                hint: formatMessage({\n                  id: getTranslation(\n                    'containers.SettingPage.edit-settings.modal-form.mainField.hint'\n                  ),\n                  defaultMessage: 'Set the displayed field',\n                }),\n                size: 6,\n                options: mainFieldOptions,\n                type: 'enumeration' as const,\n              },\n              {\n                name: 'size',\n                label: formatMessage({\n                  id: getTranslation('containers.ListSettingsView.modal-form.size'),\n                  defaultMessage: 'Size',\n                }),\n                size: 6,\n                options: [\n                  { value: '4', label: '33%' },\n                  { value: '6', label: '50%' },\n                  { value: '8', label: '66%' },\n                  { value: '12', label: '100%' },\n                ],\n                type: 'enumeration' as const,\n              },\n            ]\n              .filter(filterFieldsBasedOnAttributeType(attribute.type))\n              .map(({ size, ...field }) => (\n                <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n                  <InputRenderer {...field} />\n                </Grid.Item>\n              ))}\n          </Grid.Root>\n        </Modal.Body>\n        <Modal.Footer>\n          <Modal.Close>\n            <Button variant=\"tertiary\">\n              {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n            </Button>\n          </Modal.Close>\n          <Button type=\"submit\">\n            {formatMessage({ id: 'global.finish', defaultMessage: 'Finish' })}\n          </Button>\n        </Modal.Footer>\n      </Form>\n    </Modal.Content>\n  );\n};\n\n/**\n * @internal\n * @description not all edit fields have the same editable properties, it depends on the type\n * e.g. a dynamic zone can only change it's label.\n */\nconst filterFieldsBasedOnAttributeType = (type: Schema.Attribute.Kind) => (field: InputProps) => {\n  switch (type) {\n    case 'blocks':\n    case 'richtext':\n      return field.name !== 'size' && field.name !== 'mainField';\n    case 'boolean':\n    case 'media':\n      return field.name !== 'placeholder' && field.name !== 'mainField';\n    case 'component':\n    case 'dynamiczone':\n      return field.name === 'label' || field.name === 'editable';\n    case 'json':\n      return field.name !== 'placeholder' && field.name !== 'mainField' && field.name !== 'size';\n    case 'relation':\n      return true;\n    default:\n      return field.name !== 'mainField';\n  }\n};\n\nexport { EditFieldForm };\nexport type { EditFieldFormProps };\n", "import * as React from 'react';\n\nimport { useField, useForm } from '@strapi/admin/strapi-admin';\nimport {\n  Modal,\n  Box,\n  Flex,\n  Grid,\n  IconButton,\n  IconButtonComponent,\n  Typography,\n  useComposedRefs,\n  Link,\n  Menu,\n} from '@strapi/design-system';\nimport { Cog, Cross, Drag, Pencil, Plus } from '@strapi/icons';\nimport { generateNKeysBetween as generateNKeysBetweenImpl } from 'fractional-indexing';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { useIntl } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { ItemTypes } from '../../constants/dragAndDrop';\nimport { type UseDragAndDropOptions, useDragAndDrop } from '../../hooks/useDragAndDrop';\nimport { getTranslation } from '../../utils/translations';\nimport { ComponentIcon } from '../ComponentIcon';\n\nimport { EditFieldForm, EditFieldFormProps } from './EditFieldForm';\n\nimport type { ConfigurationFormData, EditFieldSpacerLayout } from './Form';\nimport type { EditLayout } from '../../hooks/useDocumentLayout';\n\ntype FormField = ConfigurationFormData['layout'][number]['children'][number];\ntype Field = Omit<ConfigurationFormData['layout'][number]['children'][number], '__temp_key__'>;\n\n/* -------------------------------------------------------------------------------------------------\n * Fields\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FieldsProps extends Pick<EditLayout, 'metadatas'>, Pick<FieldProps, 'components'> {\n  attributes: {\n    [key: string]: FieldProps['attribute'];\n  };\n  fieldSizes: Record<string, number>;\n  components: EditLayout['components'];\n}\n\nconst Fields = ({ attributes, fieldSizes, components, metadatas = {} }: FieldsProps) => {\n  const { formatMessage } = useIntl();\n\n  const layout = useForm<ConfigurationFormData['layout']>(\n    'Fields',\n    (state) => state.values.layout ?? []\n  );\n  const onChange = useForm('Fields', (state) => state.onChange);\n  const addFieldRow = useForm('Fields', (state) => state.addFieldRow);\n  const removeFieldRow = useForm('Fields', (state) => state.removeFieldRow);\n\n  const existingFields = layout.map((row) => row.children.map((field) => field.name)).flat();\n\n  /**\n   * Get the fields that are not already in the layout\n   * But also check that they are visible before we give users\n   * the option to display them. e.g. `id` is not visible.\n   */\n  const remainingFields = Object.entries(metadatas).reduce<Field[]>((acc, current) => {\n    const [name, { visible, ...field }] = current;\n\n    if (!existingFields.includes(name) && visible === true) {\n      const type = attributes[name]?.type;\n      const size = type ? fieldSizes[type] : 12;\n\n      acc.push({\n        ...field,\n        label: field.label ?? name,\n        name,\n        size,\n      });\n    }\n\n    return acc;\n  }, []);\n\n  const handleMoveField: FieldProps['onMoveField'] = (\n    [newRowIndex, newFieldIndex],\n    [currentRowIndex, currentFieldIndex]\n  ) => {\n    /**\n     * Because this view has the constraint that the sum of field sizes cannot be greater\n     * than 12, we don't use the form's method to move field rows, instead, we calculate\n     * the new layout and set the entire form.\n     */\n    const newLayout = structuredClone(layout);\n\n    /**\n     * Remove field from the current layout space using splice so we have the item\n     */\n    const [field] = newLayout[currentRowIndex].children.splice(currentFieldIndex, 1);\n\n    if (!field || field.name === TEMP_FIELD_NAME) {\n      return;\n    }\n\n    const newRow = newLayout[newRowIndex].children;\n    const [newFieldKey] = generateNKeysBetween(newRow, 1, currentFieldIndex, newFieldIndex);\n\n    /**\n     * Next we inject the field into it's new row at it's specified index, we then remove the spaces\n     * if they exist and recalculate into potentially two arrays ONLY if the sizing is now over 12,\n     * the row and the rest of the row that couldn't fit.\n     *\n     * for example, if i have a row of `[{size: 4}, {size: 6}]` and i add `{size: 8}` a index 0,\n     * the new array will look like `[{size: 8}, {size: 4}, {size: 6}]` which breaks the limit of 12,\n     * so instead we make two arrays for the new rows `[[{size: 8}, {size: 4}], [{size: 6}]]` which we\n     * then inject at the original row point with spacers included.\n     */\n    newRow.splice(newFieldIndex, 0, { ...field, __temp_key__: newFieldKey });\n\n    if (newLayout[newRowIndex].children.reduce((acc, curr) => acc + curr.size, 0) > 12) {\n      const recalculatedRows = chunkArray(\n        newLayout[newRowIndex].children.filter((field) => field.name !== TEMP_FIELD_NAME)\n      );\n\n      const rowKeys = generateNKeysBetween(\n        newLayout,\n        recalculatedRows.length,\n        currentRowIndex,\n        newRowIndex\n      );\n\n      newLayout.splice(\n        newRowIndex,\n        1,\n        ...recalculatedRows.map((row, index) => ({\n          __temp_key__: rowKeys[index],\n          children: row,\n        }))\n      );\n    }\n\n    /**\n     * Now we remove our spacers from the rows so we can understand what dead rows exist:\n     * - if there's only spacers left\n     * - there's nothing in the row, e.g. a size 12 field left it.\n     * These rows are then filtered out.\n     * After that, we recalculate the spacers for the rows that need them.\n     */\n    const newLayoutWithSpacers = newLayout\n      .map((row) => ({\n        ...row,\n        children: row.children.filter((field) => field.name !== TEMP_FIELD_NAME),\n      }))\n      .filter((row) => row.children.length > 0)\n      .map((row) => {\n        const totalSpaceTaken = row.children.reduce((acc, curr) => acc + curr.size, 0);\n\n        if (totalSpaceTaken < 12) {\n          const [spacerKey] = generateNKeysBetweenImpl(\n            row.children.at(-1)?.__temp_key__,\n            undefined,\n            1\n          );\n\n          return {\n            ...row,\n            children: [\n              ...row.children,\n              {\n                name: TEMP_FIELD_NAME,\n                size: 12 - totalSpaceTaken,\n                __temp_key__: spacerKey,\n              } satisfies EditFieldSpacerLayout,\n            ],\n          };\n        }\n\n        return row;\n      });\n\n    onChange('layout', newLayoutWithSpacers);\n  };\n\n  const handleRemoveField =\n    (rowIndex: number, fieldIndex: number): FieldProps['onRemoveField'] =>\n    () => {\n      if (layout[rowIndex].children.length === 1) {\n        removeFieldRow(`layout`, rowIndex);\n      } else {\n        onChange(`layout.${rowIndex}.children`, [\n          ...layout[rowIndex].children.slice(0, fieldIndex),\n          ...layout[rowIndex].children.slice(fieldIndex + 1),\n        ]);\n      }\n    };\n\n  const handleAddField = (field: Field) => () => {\n    addFieldRow('layout', { children: [field] });\n  };\n\n  return (\n    <Flex paddingTop={6} direction=\"column\" alignItems=\"stretch\" gap={4}>\n      <Flex alignItems=\"flex-start\" direction=\"column\" justifyContent=\"space-between\">\n        <Typography fontWeight=\"bold\">\n          {formatMessage({\n            id: getTranslation('containers.list.displayedFields'),\n            defaultMessage: 'Displayed fields',\n          })}\n        </Typography>\n        <Typography variant=\"pi\" textColor=\"neutral600\">\n          {formatMessage({\n            id: 'containers.SettingPage.editSettings.description',\n            defaultMessage: 'Drag & drop the fields to build the layout',\n          })}\n        </Typography>\n      </Flex>\n      <Box padding={4} hasRadius borderStyle=\"dashed\" borderWidth=\"1px\" borderColor=\"neutral300\">\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n          {layout.map((row, rowIndex) => (\n            <Grid.Root gap={2} key={row.__temp_key__}>\n              {row.children.map(({ size, ...field }, fieldIndex) => (\n                <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n                  <Field\n                    attribute={attributes[field.name]}\n                    components={components}\n                    index={[rowIndex, fieldIndex]}\n                    name={`layout.${rowIndex}.children.${fieldIndex}`}\n                    onMoveField={handleMoveField}\n                    onRemoveField={handleRemoveField(rowIndex, fieldIndex)}\n                  />\n                </Grid.Item>\n              ))}\n            </Grid.Root>\n          ))}\n          <Menu.Root>\n            <Menu.Trigger\n              startIcon={<Plus />}\n              endIcon={null}\n              disabled={remainingFields.length === 0}\n              fullWidth\n              variant=\"secondary\"\n            >\n              {formatMessage({\n                id: getTranslation('containers.SettingPage.add.field'),\n                defaultMessage: 'Insert another field',\n              })}\n            </Menu.Trigger>\n            <Menu.Content>\n              {remainingFields.map((field) => (\n                <Menu.Item key={field.name} onSelect={handleAddField(field)}>\n                  {field.label}\n                </Menu.Item>\n              ))}\n            </Menu.Content>\n          </Menu.Root>\n        </Flex>\n      </Box>\n    </Flex>\n  );\n};\n\n/**\n * @internal\n * @description Small abstraction to solve within an array of fields where you can\n * add a field to the beginning or start, move back and forth what it's index range\n * should be when calculating it's new temp key\n */\nconst generateNKeysBetween = <Field extends { __temp_key__: string }>(\n  field: Field[],\n  count: number,\n  currInd: number,\n  newInd: number\n) => {\n  const startKey = currInd > newInd ? field[newInd - 1]?.__temp_key__ : field[newInd]?.__temp_key__;\n  const endKey = currInd > newInd ? field[newInd]?.__temp_key__ : field[newInd + 1]?.__temp_key__;\n\n  return generateNKeysBetweenImpl(startKey, endKey, count);\n};\n\n/**\n * @internal\n * @description chunks a row of layouts by the max size we allow, 12. It does not add the\n * spacers again, that should be added separately.\n */\nconst chunkArray = (array: FormField[]) => {\n  const result: Array<FormField[]> = [];\n  let temp: FormField[] = [];\n\n  array.reduce((acc, field) => {\n    if (acc + field.size > 12) {\n      result.push(temp);\n      temp = [field];\n      return field.size;\n    } else {\n      temp.push(field);\n      return acc + field.size;\n    }\n  }, 0);\n\n  if (temp.length > 0) {\n    result.push(temp);\n  }\n\n  return result;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Field\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FieldProps extends Pick<EditFieldFormProps, 'name' | 'attribute'> {\n  components: EditLayout['components'];\n  index: [row: number, index: number];\n  onMoveField: UseDragAndDropOptions<number[]>['onMoveItem'];\n  onRemoveField: React.MouseEventHandler<HTMLButtonElement>;\n}\n\nconst TEMP_FIELD_NAME = '_TEMP_';\n\n/**\n * Displays a field in the layout with drag options, also\n * opens a modal  to edit the details of said field.\n */\nconst Field = ({ attribute, components, name, index, onMoveField, onRemoveField }: FieldProps) => {\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const { formatMessage } = useIntl();\n\n  const { value } = useField<FormField>(name);\n\n  const [{ isDragging }, objectRef, dropRef, dragRef, dragPreviewRef] = useDragAndDrop<\n    Array<number>\n  >(true, {\n    dropSensitivity: 'immediate',\n    type: ItemTypes.EDIT_FIELD,\n    item: { index, label: value?.label, name },\n    index,\n    onMoveItem: onMoveField,\n  });\n\n  React.useEffect(() => {\n    dragPreviewRef(getEmptyImage(), { captureDraggingState: false });\n  }, [dragPreviewRef]);\n\n  const composedRefs = useComposedRefs<HTMLSpanElement>(dragRef, objectRef);\n\n  const handleRemoveField: React.MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onRemoveField(e);\n  };\n\n  const onEditFieldMeta: React.MouseEventHandler<HTMLButtonElement> = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsModalOpen(true);\n  };\n\n  const tempRefs = useComposedRefs<HTMLSpanElement>(dropRef, objectRef);\n\n  if (!value) {\n    return null;\n  }\n\n  if (value.name === TEMP_FIELD_NAME) {\n    return <Flex tag=\"span\" height=\"100%\" style={{ opacity: 0 }} ref={tempRefs} />;\n  }\n\n  return (\n    <Modal.Root open={isModalOpen} onOpenChange={setIsModalOpen}>\n      <Flex\n        borderColor=\"neutral150\"\n        background=\"neutral100\"\n        hasRadius\n        style={{ opacity: isDragging ? 0.5 : 1 }}\n        ref={dropRef}\n        gap={3}\n        cursor=\"pointer\"\n        onClick={() => {\n          setIsModalOpen(true);\n        }}\n      >\n        <DragButton\n          tag=\"span\"\n          withTooltip={false}\n          label={formatMessage(\n            {\n              id: getTranslation('components.DraggableCard.move.field'),\n              defaultMessage: 'Move {item}',\n            },\n            { item: value.label }\n          )}\n          onClick={(e) => e.stopPropagation()}\n          ref={composedRefs}\n        >\n          <Drag />\n        </DragButton>\n        <Flex direction=\"column\" alignItems=\"flex-start\" grow={1} overflow=\"hidden\">\n          <Flex gap={3} justifyContent=\"space-between\" width=\"100%\">\n            <Typography ellipsis fontWeight=\"bold\">\n              {value.label}\n            </Typography>\n            <Flex>\n              <IconButton\n                type=\"button\"\n                variant=\"ghost\"\n                background=\"transparent\"\n                onClick={onEditFieldMeta}\n                withTooltip={false}\n                label={formatMessage(\n                  {\n                    id: getTranslation('components.DraggableCard.edit.field'),\n                    defaultMessage: 'Edit {item}',\n                  },\n                  { item: value.label }\n                )}\n              >\n                <Pencil />\n              </IconButton>\n              <IconButton\n                type=\"button\"\n                variant=\"ghost\"\n                onClick={handleRemoveField}\n                background=\"transparent\"\n                withTooltip={false}\n                label={formatMessage(\n                  {\n                    id: getTranslation('components.DraggableCard.delete.field'),\n                    defaultMessage: 'Delete {item}',\n                  },\n                  { item: value.label }\n                )}\n              >\n                <Cross />\n              </IconButton>\n            </Flex>\n          </Flex>\n          {attribute?.type === 'component' ? (\n            <Flex\n              paddingTop={3}\n              paddingRight={3}\n              paddingBottom={3}\n              paddingLeft={0}\n              alignItems=\"flex-start\"\n              direction=\"column\"\n              gap={2}\n              width=\"100%\"\n            >\n              <Grid.Root gap={4} width=\"100%\">\n                {components[attribute.component].layout.map((row) =>\n                  row.map(({ size, ...field }) => (\n                    <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n                      <Flex\n                        alignItems=\"center\"\n                        background=\"neutral0\"\n                        paddingTop={2}\n                        paddingBottom={2}\n                        paddingLeft={3}\n                        paddingRight={3}\n                        hasRadius\n                        borderColor=\"neutral200\"\n                      >\n                        <Typography textColor=\"neutral800\">{field.name}</Typography>\n                      </Flex>\n                    </Grid.Item>\n                  ))\n                )}\n              </Grid.Root>\n              <Link\n                // used to stop the edit form from appearing when we click here.\n                onClick={(e) => e.stopPropagation()}\n                startIcon={<Cog />}\n                tag={NavLink}\n                to={`../components/${attribute.component}/configurations/edit`}\n              >\n                {formatMessage({\n                  id: getTranslation('components.FieldItem.linkToComponentLayout'),\n                  defaultMessage: \"Set the component's layout\",\n                })}\n              </Link>\n            </Flex>\n          ) : null}\n          {attribute?.type === 'dynamiczone' ? (\n            <Flex\n              paddingTop={3}\n              paddingRight={3}\n              paddingBottom={3}\n              paddingLeft={0}\n              alignItems=\"flex-start\"\n              gap={2}\n              width=\"100%\"\n            >\n              {attribute?.components.map((uid) => (\n                <ComponentLink\n                  // used to stop the edit form from appearing when we click here.\n                  onClick={(e) => e.stopPropagation()}\n                  key={uid}\n                  to={`../components/${uid}/configurations/edit`}\n                >\n                  <ComponentIcon icon={components[uid].settings.icon} />\n                  <Typography fontSize={1} textColor=\"neutral600\" fontWeight=\"bold\">\n                    {components[uid].settings.displayName}\n                  </Typography>\n                </ComponentLink>\n              ))}\n            </Flex>\n          ) : null}\n        </Flex>\n      </Flex>\n      {value.name !== TEMP_FIELD_NAME && (\n        <EditFieldForm attribute={attribute} name={name} onClose={() => setIsModalOpen(false)} />\n      )}\n    </Modal.Root>\n  );\n};\n\nconst DragButton = styled<IconButtonComponent<'span'>>(IconButton)`\n  height: unset;\n  align-self: stretch;\n  display: flex;\n  align-items: center;\n  padding: 0;\n  border: none;\n  background-color: transparent;\n  border-radius: 0px;\n  border-right: 1px solid ${({ theme }) => theme.colors.neutral150};\n  cursor: all-scroll;\n\n  svg {\n    width: 1.2rem;\n    height: 1.2rem;\n  }\n`;\n\nconst ComponentLink = styled(NavLink)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: ${({ theme }) => theme.spaces[1]};\n  padding: ${(props) => props.theme.spaces[2]};\n  border: 1px solid ${({ theme }) => theme.colors.neutral200};\n  background: ${({ theme }) => theme.colors.neutral0};\n  width: 14rem;\n  border-radius: ${({ theme }) => theme.borderRadius};\n  text-decoration: none;\n\n  &:focus,\n  &:hover {\n    ${({ theme }) => `\n      background-color: ${theme.colors.primary100};\n      border-color: ${theme.colors.primary200};\n\n      ${Typography} {\n          color: ${theme.colors.primary600};\n      }\n    `}\n\n    /* > ComponentIcon */\n    > div:first-child {\n      background: ${({ theme }) => theme.colors.primary200};\n      color: ${({ theme }) => theme.colors.primary600};\n\n      svg {\n        path {\n          fill: ${({ theme }) => theme.colors.primary600};\n        }\n      }\n    }\n  }\n`;\n\nexport { Fields, TEMP_FIELD_NAME };\nexport type { FieldsProps };\n", "import * as React from 'react';\n\nimport {\n  Form,\n  FormProps,\n  useForm,\n  InputRenderer,\n  BackButton,\n  Layouts,\n} from '@strapi/admin/strapi-admin';\nimport { Button, Divider, Flex, Grid, Main, Typography } from '@strapi/design-system';\nimport { generateNKeysBetween } from 'fractional-indexing';\nimport pipe from 'lodash/fp/pipe';\nimport { useIntl } from 'react-intl';\n\nimport { ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD } from '../../constants/attributes';\nimport { capitalise } from '../../utils/strings';\nimport { getTranslation } from '../../utils/translations';\n\nimport { Fields, FieldsProps, TEMP_FIELD_NAME } from './Fields';\n\nimport type { EditFieldLayout, EditLayout } from '../../hooks/useDocumentLayout';\n\n/* -------------------------------------------------------------------------------------------------\n * ConfigurationForm\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ConfigurationFormProps extends Pick<FieldsProps, 'attributes' | 'fieldSizes'> {\n  layout: EditLayout;\n  onSubmit: FormProps<ConfigurationFormData>['onSubmit'];\n}\n\n/**\n * Every key in EditFieldLayout is turned to optional never and then we overwrite the ones we are using.\n */\n\ntype EditFieldSpacerLayout = {\n  [key in keyof Omit<EditFieldLayout, 'name' | 'size'>]?: never;\n} & {\n  description?: never;\n  editable?: never;\n  name: '_TEMP_';\n  size: number;\n  __temp_key__: string;\n};\n\ninterface ConfigurationFormData extends Pick<EditLayout, 'settings'> {\n  layout: Array<{\n    __temp_key__: string;\n    children: Array<\n      | (Pick<EditFieldLayout, 'label' | 'size' | 'name' | 'placeholder' | 'mainField'> & {\n          description: EditFieldLayout['hint'];\n          editable: EditFieldLayout['disabled'];\n          __temp_key__: string;\n        })\n      | EditFieldSpacerLayout\n    >;\n  }>;\n}\n\nconst ConfigurationForm = ({\n  attributes,\n  fieldSizes,\n  layout: editLayout,\n  onSubmit,\n}: ConfigurationFormProps) => {\n  const { components, settings, layout, metadatas } = editLayout;\n\n  const { formatMessage } = useIntl();\n\n  const initialValues: ConfigurationFormData = React.useMemo(() => {\n    const transformations = pipe(\n      flattenPanels,\n      replaceMainFieldWithNameOnly,\n      extractMetadata,\n      addTmpSpaceToLayout,\n      addTmpKeysToLayout\n    );\n\n    return {\n      layout: transformations(layout),\n      settings,\n    };\n  }, [layout, settings]);\n\n  return (\n    <Layouts.Root>\n      <Main>\n        <Form initialValues={initialValues} onSubmit={onSubmit} method=\"PUT\">\n          <Header name={settings.displayName ?? ''} />\n          <Layouts.Content>\n            <Flex\n              alignItems=\"stretch\"\n              background=\"neutral0\"\n              direction=\"column\"\n              gap={6}\n              hasRadius\n              shadow=\"tableShadow\"\n              paddingTop={6}\n              paddingBottom={6}\n              paddingLeft={7}\n              paddingRight={7}\n            >\n              <Typography variant=\"delta\" tag=\"h2\">\n                {formatMessage({\n                  id: getTranslation('containers.SettingPage.settings'),\n                  defaultMessage: 'Settings',\n                })}\n              </Typography>\n              <Grid.Root>\n                <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                  <InputRenderer\n                    type=\"enumeration\"\n                    label={formatMessage({\n                      id: getTranslation('containers.SettingPage.editSettings.entry.title'),\n                      defaultMessage: 'Entry title',\n                    })}\n                    hint={formatMessage({\n                      id: getTranslation(\n                        'containers.SettingPage.editSettings.entry.title.description'\n                      ),\n                      defaultMessage: 'Set the display field of your entry',\n                    })}\n                    name=\"settings.mainField\"\n                    options={Object.entries(attributes).reduce<\n                      Array<{ label: string; value: string }>\n                    >((acc, [key, attribute]) => {\n                      if (!attribute) {\n                        return acc;\n                      }\n\n                      /**\n                       * Create the list of attributes from the schema as to which can\n                       * be our `mainField` and dictate the display name of the schema\n                       * we're editing.\n                       */\n                      if (!ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD.includes(attribute.type)) {\n                        acc.push({\n                          label: key,\n                          value: key,\n                        });\n                      }\n\n                      return acc;\n                    }, [])}\n                  />\n                </Grid.Item>\n                <Grid.Item\n                  paddingTop={6}\n                  paddingBottom={6}\n                  col={12}\n                  s={12}\n                  direction=\"column\"\n                  alignItems=\"stretch\"\n                >\n                  <Divider />\n                </Grid.Item>\n                <Grid.Item col={12} s={12} direction=\"column\" alignItems=\"stretch\">\n                  <Typography variant=\"delta\" tag=\"h3\">\n                    {formatMessage({\n                      id: getTranslation('containers.SettingPage.view'),\n                      defaultMessage: 'View',\n                    })}\n                  </Typography>\n                </Grid.Item>\n                <Grid.Item col={12} s={12} direction=\"column\" alignItems=\"stretch\">\n                  <Fields\n                    attributes={attributes}\n                    components={components}\n                    fieldSizes={fieldSizes}\n                    metadatas={metadatas}\n                  />\n                </Grid.Item>\n              </Grid.Root>\n            </Flex>\n          </Layouts.Content>\n        </Form>\n      </Main>\n    </Layouts.Root>\n  );\n};\n\n/**\n * @internal\n * @description Panels don't exist in the layout, so we flatten by one.\n */\nconst flattenPanels = (layout: EditLayout['layout']): EditLayout['layout'][number] =>\n  layout.flat(1);\n\n/**\n * @internal\n * @description We don't need the mainField object in the layout, we only need the name.\n */\nconst replaceMainFieldWithNameOnly = (layout: EditLayout['layout'][number]) =>\n  layout.map((row) =>\n    row.map((field) => ({\n      ...field,\n      mainField: field.mainField?.name,\n    }))\n  );\n\n/**\n * @internal\n * @description We extract the metadata values from the field layout, because these are editable by the user.\n */\nconst extractMetadata = (\n  layout: EditLayout['layout'][number]\n): Array<Exclude<ConfigurationFormData['layout'], { name: '_TEMP_' }>[number]['children']> => {\n  return layout.map((row) =>\n    row.map(({ label, disabled, hint, placeholder, size, name, mainField }) => ({\n      label,\n      editable: !disabled,\n      description: hint,\n      mainField,\n      placeholder,\n      size,\n      name,\n      __temp_key__: '',\n    }))\n  );\n};\n\n/**\n * @internal\n * @description Each row of the layout has a max size of 12 (based on bootstrap grid system)\n * So in order to offer a better drop zone we add the _TEMP_ div to complete the remaining substract (12 - existing)\n */\nconst addTmpSpaceToLayout = (\n  layout: ReturnType<typeof extractMetadata>\n): Array<ConfigurationFormData['layout'][number]['children']> => [\n  ...layout.map((row) => {\n    const totalSpaceTaken = row.reduce((acc, field) => acc + field.size, 0);\n\n    if (totalSpaceTaken < 12) {\n      return [\n        ...row,\n        {\n          name: TEMP_FIELD_NAME,\n          size: 12 - totalSpaceTaken,\n          __temp_key__: '',\n        } satisfies EditFieldSpacerLayout,\n      ];\n    }\n\n    return row;\n  }),\n];\n\n/**\n * @internal\n * @description At this point of the transformations we have Field[][], but each row for the form should have a __temp_key__\n * applied. This means we need to change it so `Field` is nested under the children property.\n */\nconst addTmpKeysToLayout = (\n  layout: ReturnType<typeof addTmpSpaceToLayout>\n): ConfigurationFormData['layout'] => {\n  const keys = generateNKeysBetween(undefined, undefined, layout.length);\n\n  return layout.map((row, rowIndex) => {\n    const fieldKeys = generateNKeysBetween(undefined, undefined, row.length);\n\n    return {\n      __temp_key__: keys[rowIndex],\n      children: row.map((field, fieldIndex) => {\n        return {\n          ...field,\n          __temp_key__: fieldKeys[fieldIndex],\n        };\n      }),\n    };\n  });\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Header\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderProps {\n  name: string;\n}\n\nconst Header = ({ name }: HeaderProps) => {\n  const { formatMessage } = useIntl();\n  const modified = useForm('Header', (state) => state.modified);\n  const isSubmitting = useForm('Header', (state) => state.isSubmitting);\n\n  return (\n    <Layouts.Header\n      title={formatMessage(\n        {\n          id: getTranslation('components.SettingsViewWrapper.pluginHeader.title'),\n          defaultMessage: `Configure the view - {name}`,\n        },\n        { name: capitalise(name) }\n      )}\n      subtitle={formatMessage({\n        id: getTranslation('components.SettingsViewWrapper.pluginHeader.description.edit-settings'),\n        defaultMessage: 'Customize how the edit view will look like.',\n      })}\n      navigationAction={<BackButton />}\n      primaryAction={\n        <Button disabled={!modified} loading={isSubmitting} type=\"submit\">\n          {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n        </Button>\n      }\n    />\n  );\n};\n\nexport { ConfigurationForm };\nexport type { ConfigurationFormProps, ConfigurationFormData, EditFieldSpacerLayout };\n"],
  "mappings": "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",
  "names": ["FIELD_SCHEMA", "object", "shape", "label", "string", "required", "nullable", "description", "editable", "boolean", "size", "number", "EditFieldForm", "attribute", "name", "onClose", "formatMessage", "useIntl", "toggleNotification", "useNotification", "value", "onChange", "useField", "data", "mainFieldOptions", "useGetInitialDataQuery", "undefined", "selectFromResult", "res", "type", "targetModel", "targetSchema", "contentTypes", "find", "schema", "uid", "Object", "entries", "attributes", "reduce", "acc", "key", "ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD", "includes", "push", "skip", "TEMP_FIELD_NAME", "console", "error", "message", "id", "defaultMessage", "_jsx", "Modal", "Content", "_jsxs", "Form", "method", "initialValues", "validationSchema", "onSubmit", "Header", "Flex", "gap", "FieldTypeIcon", "Title", "fieldName", "capitalise", "Body", "Grid", "Root", "getTranslation", "hint", "options", "filter", "filterFieldsBasedOnAttributeType", "map", "field", "Item", "col", "direction", "alignItems", "InputRenderer", "Footer", "Close", "Button", "variant", "Fields", "attributes", "fieldSizes", "components", "metadatas", "formatMessage", "useIntl", "layout", "useForm", "state", "values", "onChange", "addFieldRow", "removeFieldRow", "existingFields", "map", "row", "children", "field", "name", "flat", "remainingFields", "Object", "entries", "reduce", "acc", "current", "visible", "includes", "type", "size", "push", "label", "handleMoveField", "newRowIndex", "newFieldIndex", "currentRowIndex", "currentFieldIndex", "newLayout", "structuredClone", "splice", "TEMP_FIELD_NAME", "newRow", "newFieldKey", "generateNKeysBetween", "__temp_key__", "curr", "recalculatedRows", "chunkArray", "filter", "rowKeys", "length", "index", "newLayoutWithSpacers", "totalSpaceTaken", "spacerKey", "generateNKeysBetweenImpl", "at", "undefined", "handleRemoveField", "rowIndex", "fieldIndex", "slice", "handleAddField", "_jsxs", "Flex", "paddingTop", "direction", "alignItems", "gap", "justifyContent", "_jsx", "Typography", "fontWeight", "id", "getTranslation", "defaultMessage", "variant", "textColor", "Box", "padding", "hasRadius", "borderStyle", "borderWidth", "borderColor", "Grid", "Root", "Item", "col", "Field", "attribute", "onMoveField", "onRemoveField", "Menu", "Trigger", "startIcon", "Plus", "endIcon", "disabled", "fullWidth", "Content", "onSelect", "count", "currInd", "newInd", "startKey", "endKey", "array", "result", "temp", "isModalOpen", "setIsModalOpen", "useState", "value", "useField", "isDragging", "objectRef", "dropRef", "dragRef", "dragPreviewRef", "useDragAndDrop", "dropSensitivity", "ItemTypes", "EDIT_FIELD", "item", "onMoveItem", "React", "useEffect", "getEmptyImage", "captureDraggingState", "composedRefs", "useComposedRefs", "e", "preventDefault", "stopPropagation", "onEditFieldMeta", "tempRefs", "tag", "height", "style", "opacity", "ref", "Modal", "open", "onOpenChange", "background", "cursor", "onClick", "DragButton", "withTooltip", "Drag", "grow", "overflow", "width", "ellipsis", "IconButton", "Pencil", "Cross", "paddingRight", "paddingBottom", "paddingLeft", "component", "Link", "Cog", "NavLink", "to", "uid", "ComponentLink", "ComponentIcon", "icon", "settings", "fontSize", "displayName", "EditFieldForm", "onClose", "styled", "theme", "colors", "neutral150", "spaces", "props", "neutral200", "neutral0", "borderRadius", "primary100", "primary200", "primary600", "ConfigurationForm", "attributes", "fieldSizes", "layout", "editLayout", "onSubmit", "components", "settings", "metadatas", "formatMessage", "useIntl", "initialValues", "useMemo", "transformations", "pipe", "flattenPanels", "replaceMainFieldWithNameOnly", "extractMetadata", "addTmpSpaceToLayout", "addTmpKeysToLayout", "_jsx", "Layouts", "Root", "Main", "_jsxs", "Form", "method", "Header", "name", "displayName", "Content", "Flex", "alignItems", "background", "direction", "gap", "hasRadius", "shadow", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight", "Typography", "variant", "tag", "id", "getTranslation", "defaultMessage", "Grid", "Item", "col", "s", "InputRenderer", "type", "label", "hint", "options", "Object", "entries", "reduce", "acc", "key", "attribute", "ATTRIBUTE_TYPES_THAT_CANNOT_BE_MAIN_FIELD", "includes", "push", "value", "Divider", "Fields", "flat", "map", "row", "field", "mainField", "disabled", "placeholder", "size", "editable", "description", "__temp_key__", "totalSpaceTaken", "TEMP_FIELD_NAME", "keys", "generateNKeysBetween", "undefined", "length", "rowIndex", "fieldKeys", "children", "fieldIndex", "modified", "useForm", "state", "isSubmitting", "title", "capitalise", "subtitle", "navigationAction", "BackButton", "primaryAction", "Button", "loading"]
}
