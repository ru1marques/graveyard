{
  "version": 3,
  "sources": ["../../../@strapi/content-type-builder/admin/src/utils/getTrad.ts", "../../../@strapi/content-type-builder/admin/src/contexts/DataManagerContext.ts", "../../../@strapi/content-type-builder/admin/src/hooks/useDataManager.ts", "../../../@strapi/content-type-builder/admin/src/contexts/FormModalNavigationContext.ts", "../../../@strapi/content-type-builder/admin/src/hooks/useFormModalNavigation.ts", "../../../@strapi/content-type-builder/admin/src/components/AttributeIcon.tsx", "../../../@strapi/content-type-builder/admin/src/components/IconPicker/constants.ts"],
  "sourcesContent": ["import { pluginId } from '../pluginId';\n\nexport const getTrad = (id: string) => `${pluginId}.${id}`;\n", "/* eslint-disable check-file/filename-naming-convention */\nimport { createContext } from 'react';\n\nimport type { SchemaType, Component } from '../types';\nimport type { Internal } from '@strapi/types';\n\n// TODO V5 Convert this any types to real types\nexport interface CustomFieldAttributeParams {\n  attributeToSet: Record<string, any>;\n  forTarget: SchemaType;\n  targetUid: Internal.UID.Schema;\n  initialAttribute: Record<string, any>;\n}\nexport interface DataManagerContextValue {\n  addAttribute: (\n    attributeToSet: Record<string, any>,\n    forTarget: SchemaType,\n    targetUid: Internal.UID.Schema,\n    isEditing?: boolean,\n    initialAttribute?: Record<string, any>,\n    shouldAddComponentToData?: boolean\n  ) => void;\n  addCustomFieldAttribute: (params: CustomFieldAttributeParams) => void;\n  editCustomFieldAttribute: (params: CustomFieldAttributeParams) => void;\n  addCreatedComponentToDynamicZone: (\n    dynamicZoneTarget: string,\n    componentsToAdd: Internal.UID.Component[]\n  ) => void;\n  createSchema: (\n    data: Record<string, any>,\n    schemaType: SchemaType,\n    uid: Internal.UID.Schema,\n    componentCategory?: string,\n    shouldAddComponentToData?: boolean\n  ) => void;\n  changeDynamicZoneComponents: (\n    dynamicZoneTarget: string,\n    newComponents: Internal.UID.Component[]\n  ) => void;\n  removeAttribute: (\n    mainDataKey: 'contentType' | 'component' | 'contentTypes' | 'components',\n    attributeToRemoveName: string,\n    componentUid?: string\n  ) => void;\n  deleteCategory: (categoryUid: string) => void;\n  deleteData: () => void;\n  editCategory: (categoryUid: string, body: any) => void;\n  removeComponentFromDynamicZone: (dzName: string, componentToRemoveIndex: number) => void;\n  setModifiedData: () => void;\n  sortedContentTypesList: any[]; // Define the actual type\n  submitData: (additionalContentTypeData?: Record<string, any>) => Promise<void>;\n  updateSchema: (\n    data: Record<string, any>,\n    schemaType: 'contentType' | 'component',\n    componentUID: Internal.UID.Component\n  ) => void;\n  components: Record<Internal.UID.Component, Component>;\n  componentsGroupedByCategory: Record<string, Component[]>;\n  componentsThatHaveOtherComponentInTheirAttributes: any[]; // Define the actual type\n  contentTypes: Record<string, any>;\n  initialData: Record<string, any>;\n  isInContentTypeView: boolean;\n  isInDevelopmentMode?: boolean;\n  modifiedData: Record<string, any>;\n  nestedComponents: any[]; // Define the actual type\n  reservedNames: {\n    models: string[];\n    attributes: string[];\n  };\n  allComponentsCategories: any[];\n}\n\n// @ts-expect-error need to pass initial value to params\nexport const DataManagerContext = createContext<DataManagerContextValue>();\n", "import { useContext } from 'react';\n\nimport { DataManagerContext } from '../contexts/DataManagerContext';\n\nexport const useDataManager = () => useContext(DataManagerContext);\n", "/* eslint-disable check-file/filename-naming-convention */\nimport * as React from 'react';\n\nimport { INITIAL_STATE_DATA } from '../components/FormModalNavigationProvider/constants';\n\nimport type {\n  ModalEventProps,\n  State,\n} from '../components/FormModalNavigationProvider/FormModalNavigationProvider';\nimport type { SchemaType } from '../types';\nimport type { Internal } from '@strapi/types';\n\nexport interface FormModalNavigationContextValue {\n  onCloseModal: () => void;\n  onOpenModalAddField: (options: {\n    forTarget: SchemaType;\n    targetUid?: Internal.UID.Schema;\n  }) => void;\n  onClickSelectField: (option: ModalEventProps) => void;\n  onClickSelectCustomField: (option: ModalEventProps) => void;\n  onNavigateToChooseAttributeModal: (options: ModalEventProps) => void;\n  onNavigateToAddCompoToDZModal: (options: ModalEventProps) => void;\n  onOpenModalAddComponentsToDZ: (options: ModalEventProps) => void;\n  onNavigateToCreateComponentStep2: () => void;\n  onOpenModalCreateSchema: (options: State) => void;\n  onOpenModalEditCategory: (categoryName: string) => void;\n  onOpenModalEditField: (options: ModalEventProps) => void;\n  onOpenModalEditCustomField: (options: ModalEventProps) => void;\n  onOpenModalEditSchema: (options: ModalEventProps) => void;\n  setFormModalNavigationState: (value: React.SetStateAction<typeof INITIAL_STATE_DATA>) => void;\n  actionType: string;\n  attributeName: string;\n  attributeType: string;\n  customFieldUid: string;\n  categoryName: string;\n  dynamicZoneTarget: string;\n  forTarget: SchemaType;\n  modalType: string;\n  isOpen: boolean;\n  showBackLink: boolean;\n  kind: string;\n  step: string;\n  targetUid: Internal.UID.Schema;\n  activeTab: string;\n  setActiveTab: (value: React.SetStateAction<string>) => void;\n}\n\n// @ts-expect-error need to pass initial value to params\nexport const FormModalNavigationContext = React.createContext<FormModalNavigationContextValue>();\n", "import { useContext } from 'react';\n\nimport { FormModalNavigationContext } from '../contexts/FormModalNavigationContext';\n\nexport const useFormModalNavigation = () => useContext(FormModalNavigationContext);\n", "import { ComponentType, SVGProps } from 'react';\n\nimport { useStrapiApp } from '@strapi/admin/strapi-admin';\nimport { Box } from '@strapi/design-system';\nimport {\n  BooleanField,\n  CollectionType,\n  ComponentField,\n  DateField,\n  DynamicZoneField,\n  EmailField,\n  EnumerationField,\n  JsonField,\n  MediaField,\n  NumberField,\n  PasswordField,\n  RelationField,\n  MarkdownField,\n  SingleType,\n  TextField,\n  UidField,\n  BlocksField,\n} from '@strapi/icons/symbols';\nimport { styled } from 'styled-components';\n\nconst iconByTypes: Record<string, ComponentType<SVGProps<SVGSVGElement>>> = {\n  biginteger: NumberField,\n  blocks: BlocksField,\n  boolean: BooleanField,\n  collectionType: CollectionType,\n  component: ComponentField,\n  contentType: CollectionType,\n  date: DateField,\n  datetime: DateField,\n  decimal: NumberField,\n  dynamiczone: DynamicZoneField,\n  email: EmailField,\n  enum: EnumerationField,\n  enumeration: EnumerationField,\n  file: MediaField,\n  files: MediaField,\n  float: NumberField,\n  integer: NumberField,\n  json: JsonField,\n  JSON: JsonField,\n  media: MediaField,\n  number: NumberField,\n  password: PasswordField,\n  relation: RelationField,\n  richtext: MarkdownField,\n  singleType: SingleType,\n  string: TextField,\n  text: TextField,\n  time: DateField,\n  timestamp: DateField,\n  uid: UidField,\n};\n\nconst IconBox = styled(Box)`\n  svg {\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nexport type IconByType = keyof typeof iconByTypes;\n\ntype AttributeIconProps = {\n  type: IconByType;\n  customField?: string | null;\n};\n\nexport const AttributeIcon = ({ type, customField = null, ...rest }: AttributeIconProps) => {\n  const getCustomField = useStrapiApp('AttributeIcon', (state) => state.customFields.get);\n\n  let Compo: any = iconByTypes[type];\n\n  if (customField) {\n    const customFieldObject = getCustomField(customField);\n    const icon = customFieldObject?.icon;\n    if (icon) {\n      Compo = icon;\n    }\n  }\n\n  if (!iconByTypes[type]) {\n    return null;\n  }\n\n  return (\n    <IconBox width=\"3.2rem\" shrink={0} {...rest} aria-hidden>\n      <Box tag={Compo} />\n    </IconBox>\n  );\n};\n", "import * as Icons from '@strapi/icons';\nimport * as Symbols from '@strapi/icons/symbols';\n\nexport type Icon = (typeof Icons)[keyof typeof Icons] | (typeof Symbols)[keyof typeof Symbols];\n\nconst COMPONENT_ICONS: Record<string, Icon> = {\n  alien: Icons.Alien,\n  apps: Icons.GridNine,\n  archive: Icons.Archive,\n  arrowDown: Icons.ArrowDown,\n  arrowLeft: Icons.ArrowLeft,\n  arrowRight: Icons.ArrowRight,\n  arrowUp: Icons.ArrowUp,\n  attachment: Icons.Paperclip,\n  bell: Icons.Bell,\n  bold: Icons.Bold,\n  book: Icons.Book,\n  briefcase: Icons.Briefcase,\n  brush: Icons.PaintBrush,\n  bulletList: Icons.BulletList,\n  calendar: Icons.Calendar,\n  car: Icons.Car,\n  cast: Icons.Cast,\n  chartBubble: Icons.ChartBubble,\n  chartCircle: Icons.ChartCircle,\n  chartPie: Icons.ChartPie,\n  check: Icons.Check,\n  clock: Icons.Clock,\n  cloud: Icons.Cloud,\n  code: Icons.Code,\n  cog: Icons.Cog,\n  collapse: Icons.Collapse,\n  command: Icons.Command,\n  connector: Icons.Faders,\n  crop: Icons.Crop,\n  crown: Icons.Crown,\n  cup: Icons.Coffee,\n  cursor: Icons.Cursor,\n  dashboard: Icons.SquaresFour,\n  database: Icons.Database,\n  discuss: Icons.Discuss,\n  doctor: Icons.Stethoscope,\n  earth: Icons.Earth,\n  emotionHappy: Icons.EmotionHappy,\n  emotionUnhappy: Icons.EmotionUnhappy,\n  envelop: Icons.Mail,\n  exit: Icons.SignOut,\n  expand: Icons.Expand,\n  eye: Icons.Eye,\n  feather: Icons.Feather,\n  file: Icons.File,\n  fileError: Icons.FileError,\n  filePdf: Icons.FilePdf,\n  filter: Icons.Filter,\n  folder: Icons.Folder,\n  gate: Icons.CastleTurret,\n  gift: Icons.Gift,\n  globe: Icons.Globe,\n  grid: Icons.GridFour,\n  handHeart: Icons.HandHeart,\n  hashtag: Icons.Hashtag,\n  headphone: Icons.Headphones,\n  heart: Icons.Heart,\n  house: Icons.House,\n  information: Icons.Information,\n  italic: Icons.Italic,\n  key: Icons.Key,\n  landscape: Icons.Images,\n  layer: Icons.ListPlus,\n  layout: Icons.Layout,\n  lightbulb: Icons.Lightbulb,\n  link: Icons.Link,\n  lock: Icons.Lock,\n  magic: Icons.Magic,\n  manyToMany: Icons.ManyToMany,\n  manyToOne: Icons.ManyToOne,\n  manyWays: Icons.ManyWays,\n  medium: Symbols.Medium,\n  message: Icons.Message,\n  microphone: Icons.Microphone,\n  monitor: Icons.Monitor,\n  moon: Icons.Moon,\n  music: Icons.MusicNotes,\n  oneToMany: Icons.OneToMany,\n  oneToOne: Icons.OneToOne,\n  oneWay: Icons.OneWay,\n  paint: Icons.PaintBrush,\n  paintBrush: Icons.PaintBrush,\n  paperPlane: Icons.PaperPlane,\n  pencil: Icons.Pencil,\n  phone: Icons.Phone,\n  picture: Icons.Image,\n  pin: Icons.Pin,\n  pinMap: Icons.PinMap,\n  plane: Icons.Plane,\n  play: Icons.Play,\n  plus: Icons.Plus,\n  priceTag: Icons.PriceTag,\n  puzzle: Icons.PuzzlePiece,\n  question: Icons.Question,\n  quote: Icons.Quotes,\n  refresh: Icons.ArrowClockwise,\n  restaurant: Icons.Restaurant,\n  rocket: Icons.Rocket,\n  rotate: Icons.ArrowsCounterClockwise,\n  scissors: Icons.Scissors,\n  search: Icons.Search,\n  seed: Icons.Plant,\n  server: Icons.Server,\n  shield: Icons.Shield,\n  shirt: Icons.Shirt,\n  shoppingCart: Icons.ShoppingCart,\n  slideshow: Icons.PresentationChart,\n  stack: Icons.Stack,\n  star: Icons.Star,\n  store: Icons.Store,\n  strikeThrough: Icons.StrikeThrough,\n  sun: Icons.Sun,\n  television: Icons.Television,\n  thumbDown: Icons.ThumbDown,\n  thumbUp: Icons.ThumbUp,\n  train: Icons.Train,\n  twitter: Symbols.X,\n  typhoon: Icons.Typhoon,\n  underline: Icons.Underline,\n  user: Icons.User,\n  volumeMute: Icons.VolumeMute,\n  volumeUp: Icons.VolumeUp,\n  walk: Icons.Walk,\n  wheelchair: Icons.Wheelchair,\n  write: Icons.Feather,\n};\n\nexport { COMPONENT_ICONS };\n"],
  "mappings": "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",
  "names": ["getTrad", "id", "pluginId", "DataManagerContext", "createContext", "useDataManager", "useContext", "DataManagerContext", "FormModalNavigationContext", "createContext", "useFormModalNavigation", "useContext", "FormModalNavigationContext", "iconByTypes", "biginteger", "NumberField", "blocks", "BlocksField", "boolean", "BooleanField", "collectionType", "CollectionType", "component", "ComponentField", "contentType", "date", "DateField", "datetime", "decimal", "dynamiczone", "DynamicZoneField", "email", "EmailField", "enum", "EnumerationField", "enumeration", "file", "MediaField", "files", "float", "integer", "json", "JsonField", "JSON", "media", "number", "password", "PasswordField", "relation", "RelationField", "richtext", "MarkdownField", "singleType", "SingleType", "string", "TextField", "text", "time", "timestamp", "uid", "UidField", "IconBox", "styled", "Box", "AttributeIcon", "type", "customField", "rest", "getCustomField", "useStrapiApp", "state", "customFields", "get", "Compo", "customFieldObject", "icon", "_jsx", "width", "shrink", "aria-hidden", "tag", "COMPONENT_ICONS", "alien", "Alien", "apps", "GridNine", "archive", "Archive", "arrowDown", "ArrowDown", "arrowLeft", "ArrowLeft", "arrowRight", "ArrowRight", "arrowUp", "ArrowUp", "attachment", "Paperclip", "bell", "Bell", "bold", "Bold", "book", "Book", "briefcase", "Briefcase", "brush", "PaintBrush", "bulletList", "BulletList", "calendar", "Calendar", "car", "Car", "cast", "Cast", "chartBubble", "ChartBubble", "chartCircle", "ChartCircle", "chartPie", "ChartPie", "check", "Check", "clock", "Clock", "cloud", "Cloud", "code", "Code", "cog", "Cog", "collapse", "Collapse", "command", "Command", "connector", "Faders", "crop", "Crop", "crown", "Crown", "cup", "Coffee", "cursor", "Cursor", "dashboard", "SquaresFour", "database", "Database", "discuss", "Discuss", "doctor", "Stethoscope", "earth", "Earth", "emotionHappy", "EmotionHappy", "emotionUnhappy", "EmotionUnhappy", "envelop", "Mail", "exit", "SignOut", "expand", "Expand", "eye", "Eye", "feather", "Feather", "file", "File", "fileError", "FileError", "filePdf", "FilePdf", "filter", "Filter", "folder", "Folder", "gate", "CastleTurret", "gift", "Gift", "globe", "Globe", "grid", "GridFour", "handHeart", "HandHeart", "hashtag", "Hashtag", "headphone", "Headphones", "heart", "Heart", "house", "House", "information", "Information", "italic", "Italic", "key", "Key", "landscape", "Images", "layer", "ListPlus", "layout", "Layout", "lightbulb", "Lightbulb", "link", "Link", "lock", "Lock", "magic", "Magic", "manyToMany", "ManyToMany", "manyToOne", "ManyToOne", "manyWays", "ManyWays", "medium", "Medium", "message", "Message", "microphone", "Microphone", "monitor", "Monitor", "moon", "Moon", "music", "MusicNotes", "oneToMany", "OneToMany", "oneToOne", "OneToOne", "oneWay", "OneWay", "paint", "paintBrush", "paperPlane", "PaperPlane", "pencil", "Pencil", "phone", "Phone", "picture", "Image", "pin", "Pin", "pinMap", "PinMap", "plane", "Plane", "play", "Play", "plus", "Plus", "priceTag", "PriceTag", "puzzle", "PuzzlePiece", "question", "Question", "quote", "Quotes", "refresh", "ArrowClockwise", "restaurant", "Restaurant", "rocket", "Rocket", "rotate", "ArrowsCounterClockwise", "scissors", "Scissors", "search", "Search", "seed", "Plant", "server", "Server", "shield", "Shield", "shirt", "Shirt", "shoppingCart", "ShoppingCart", "slideshow", "PresentationChart", "stack", "Stack", "star", "Star", "store", "Store", "strikeThrough", "StrikeThrough", "sun", "Sun", "television", "Television", "thumbDown", "ThumbDown", "thumbUp", "ThumbUp", "train", "Train", "twitter", "X", "typhoon", "Typhoon", "underline", "Underline", "user", "User", "volumeMute", "VolumeMute", "volumeUp", "VolumeUp", "walk", "Walk", "wheelchair", "Wheelchair", "write"]
}
